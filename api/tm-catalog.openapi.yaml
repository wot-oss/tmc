openapi: 3.0.3
info:
  title: Thing Model Catalog - OpenAPI 3.0
  version: 0.1.2
  description: "This is the Thing Model Catalog API specification."
  contact: {}  
externalDocs:
  description: Find out more about Thing Model Catalog
  url: https://github.com/wot-oss/tmc
servers:
  - url: ''
security:
  - BearerAuth: []
tags:
  - name: attachments
    description: Access to TM and TM name attachments
  - name: inventory
    description: Access to the inventory of the catalog
  - name: thing-models
    description: Access to Thing Model content
  - name: authors
    description: Access to authors information
  - name: manufacturers
    description: Access to manufacturers information
  - name: mpns
    description: Access to mpns (manufacturer part numbers) information
  - name: repos
    description: Access to backend storage repositories list
  - name: health
    description: Access to health information
  - name: internal
    description: Access to internal information
paths:
  /inventory:
    get:
      tags:
        - inventory
      summary: Get the inventory of the catalog
      description: Returns the catalogs inventory
      operationId: getInventory
      parameters:
        - $ref: '#/components/parameters/RepoConstraint'
        - name: 'filter.author'
          in: query
          description: |
            Filters the inventory by one or more authors having exact match.  
            The filter works additive to other filters.
          schema:
            type: string
          example: 'MyCompany,siemens'
        - name: 'filter.manufacturer'
          in: query
          description: |
            Filters the inventory by one or more manufacturers having exact match.  
            The filter works additive to other filters.
          schema:
            type: string
          example: 'BarTech,siemens'
        - name: 'filter.mpn'
          in: query
          description: |
            Filters the inventory by one ore more mpn (manufacturer part number) having exact match.   
            The filter works additive to other filters.
          schema:
            type: string
          example: 'BazLamp,POC1000'
        - name: 'filter.name'
          in: query
          description: |
            Filters the inventory by inventory entry name having a prefix match of full path parts.   
            The filter works additive to other filters.
          schema:
            type: string
          example: 'siemens/siemens/poc1000'
        - name: 'search'
          in: query
          description: |
            Filters the inventory according to whether the content of the inventory entries matches the given search.    
            The search works additive to other filters.
          schema:
            type: string
          example: ''
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryResponse'
              examples:
                inventory:
                  $ref: '#/components/examples/InventoryResponseExample'
        '400':
          description: Invalid filter parameter supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Upstream repository error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inventory/{tmID}:
    get:
      tags:
        - inventory
      summary: Get the metadata of a single TM by ID
      description: Returns the metadata of a single TM as a list which contains at most one inventory entry per repository
      operationId: getInventoryByID
      parameters:
        - $ref: '#/components/parameters/TMID'
        - $ref: '#/components/parameters/RepoConstraint'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryEntryVersionsResponse'
              examples:
                inventoryEntryVersion:
                  $ref: '#/components/examples/InventoryEntryVersionsResponseExample'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Inventory entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inventory/.latest/{fetchName}:
    get:
      tags:
        - inventory
      summary: Get the metadata of the most recent TM version matching the name
      description: Returns the metadata of the most recent TM version matching the fetch name
      operationId: getInventoryByFetchName
      parameters:
        - $ref: '#/components/parameters/RepoConstraint'
        - $ref: '#/components/parameters/FetchName'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryEntryVersionResponse'
              examples:
                inventoryEntryVersion:
                  $ref: '#/components/examples/InventoryEntryVersionResponseExample'
        '400':
          description: Invalid fetch name supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Inventory entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inventory/.tmName/{tmName}:
    get:
      tags:
        - inventory
      summary: Get inventory entries by TM name
      description: Returns a list of inventory entries with the given TM name from all repositories
      operationId: getInventoryByName
      parameters:
        - name: tmName
          in: path
          description: Name of inventory entry
          required: true
          schema:
            type: string
          example: 'siemens/siemens/poc1000'
        - $ref: '#/components/parameters/RepoConstraint'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryEntryResponse'
              examples:
                inventoryEntry:
                  $ref: '#/components/examples/InventoryEntryResponseExample'
        '400':
          description: Invalid TM name supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Inventory entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /thing-models/{tmID}:
    get:
      tags:
        - thing-models
      summary: Get the content of a Thing Model by its ID
      description: > 
        Returns the actual content of a Thing Model.
      operationId: getThingModelById
      parameters:
        - $ref: '#/components/parameters/TMID'
        - $ref: '#/components/parameters/RepoConstraint'
        - name: restoreId
          in: query
          description: restore the TM's original external id, if it had one
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: |
            Successful operation 

            **For the schema of the returned Thing Model see** [Thing Model JSON schema](https://github.com/w3c/wot-thing-description/blob/main/validation/tm-json-schema-validation.json)
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Invalid ID or fetch name supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Content of the Thing Model not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - thing-models
      summary: Delete a Thing Model by ID
      description: >
        Deletes a Thing Model.
        Normally, the catalog is write-only and no TMs are ever deleted.
        The delete operation is implemented for the rare cases when a TM has been imported whilst containing major errors 
        or by mistake. It is mandatory to provide the query parameter ?force=true to delete a TM.
      operationId: deleteThingModelById
      parameters:
        - $ref: '#/components/parameters/TMID'
        - $ref: '#/components/parameters/RepoDisambiguator'
        - name: force
          in: query
          description: flag to force the deletion. must be set to "true"
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid ID or 'force' parameter supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Thing Model not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /thing-models/.latest/{fetchName}:
    get:
      tags:
        - thing-models
      summary: Get the content of a Thing Model by fetch name
      description: > 
        Returns the actual content of the Thing Model selected by given fetch name.
      operationId: getThingModelByFetchName
      parameters:
        - $ref: '#/components/parameters/RepoConstraint'
        - $ref: '#/components/parameters/FetchName'
        - name: restoreId
          in: query
          description: restore the TM's original external id, if it had one
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: |
            Successful operation 

            **For the schema of the returned Thing Model see** [Thing Model JSON schema](https://github.com/w3c/wot-thing-description/blob/main/validation/tm-json-schema-validation.json)
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Invalid ID or fetch name supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Content of the Thing Model not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /thing-models/{tmID}/.attachments/{attachmentFileName}:
    get:
      tags:
        - attachments
      summary: Get the actual content of an attachment to a Thing Model
      description:
        Returns the content of an attachment to a Thing Model.
        Use '/thing-models/.tmName/{tmName}/.attachments/{attachmentFileName}' endpoint to get TM name's attachments
      operationId: getThingModelAttachmentByName
      parameters:
        - $ref: '#/components/parameters/TMID'
        - $ref: '#/components/parameters/AttachmentFileName'
        - $ref: '#/components/parameters/RepoDisambiguator'
      responses:
        '200':
          description: Successful operation
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid ID requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: TM or attachment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - attachments
      summary: Upload an attachment to a Thing Model
      description: Upload an attachment to a Thing Model
      operationId: putTMIDAttachment
      parameters:
        - $ref: '#/components/parameters/TMID'
        - $ref: '#/components/parameters/AttachmentFileName'
        - $ref: '#/components/parameters/RepoDisambiguator'
        - $ref: '#/components/parameters/ForceImport'
      requestBody:
        description: Add a new attachment or overwrite an existing one
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        '204':
          description: Successfully imported
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Conflict, attachment already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - attachments
      summary: Delete an attachment to a Thing Model
      description: Delete an attachment to a Thing Model
      operationId: deleteThingModelAttachmentByName
      parameters:
        - $ref: '#/components/parameters/TMID'
        - $ref: '#/components/parameters/AttachmentFileName'
        - $ref: '#/components/parameters/RepoDisambiguator'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid ID or inventory name supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Thing Model or inventory name or attachment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /thing-models/.tmName/{tmName}/.attachments/{attachmentFileName}:
    get:
      tags:
        - attachments
      summary: Get the actual content of an attachment to a TM name
      description:
        Returns the content of an attachment to a TM name
      operationId: getTMNameAttachment
      parameters:
        - $ref: '#/components/parameters/TMName'
        - $ref: '#/components/parameters/AttachmentFileName'
        - $ref: '#/components/parameters/RepoDisambiguator'
      responses:
        '200':
          description: Successful operation
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid TM name requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: TM name or attachment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - attachments
      summary: Upload an attachment to a TM name
      description: Upload an attachment to a TM name
      operationId: putTMNameAttachment
      parameters:
        - $ref: '#/components/parameters/TMName'
        - $ref: '#/components/parameters/AttachmentFileName'
        - $ref: '#/components/parameters/RepoDisambiguator'
        - $ref: '#/components/parameters/ForceImport'
      requestBody:
        description: Add a new attachment or overwrite an existing one
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        '204':
          description: Successfully added
        '400':
          description: Invalid TM name supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Conflict, attachment already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - attachments
      summary: Delete an attachment to a TM name
      description: Delete an attachment to a TM name
      operationId: deleteTMNameAttachment
      parameters:
        - $ref: '#/components/parameters/TMName'
        - $ref: '#/components/parameters/AttachmentFileName'
        - $ref: '#/components/parameters/RepoDisambiguator'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid TM name supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: TM name or attachment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /thing-models:
    post:
      tags:
        - thing-models
      summary: Import a Thing Model
      description: Import a Thing Model
      operationId: importThingModel
      parameters:
        - $ref: '#/components/parameters/RepoDisambiguator'
        - $ref: '#/components/parameters/ForceImport'
        - name: optPath
          in: query
          description: optional path parts to append to the target path (and id) of imported TM, after the mandatory path structure
          required: false
          schema:
            type: string
      requestBody:
        description: |
          Import a Thing Model  
          
          **For the schema of a Thing Model see** [Thing Model JSON schema](https://github.com/w3c/wot-thing-description/blob/main/validation/tm-json-schema-validation.json)
        content:
          application/json:
            schema:
              type: object
            examples:
              payload:
                $ref: '#/components/examples/ImportTMPayloadExample'
        required: true
      responses:
        '201':
          description: Successfully imported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportThingModelResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Conflict, Thing Model already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /authors:
    get:
      tags:
        - authors
      summary: Get the contained authors of the inventory
      description: Returns the contained authors of the inventory
      operationId: getAuthors
      parameters:
        - name: 'filter.manufacturer'
          in: query
          description: |
            Filters the authors according to whether they have inventory entries  
            which belong to at least one of the given manufacturers with an exact match.  
            The filter works additive to other filters.
          schema:
            type: string
          example: 'BarTech,siemens'
        - name: 'filter.mpn'
          in: query
          description: |
            Filters the authors according to whether they have inventory entries    
            which belong to at least one of the given mpn (manufacturer part number) with an exact match.    
            The filter works additive to other filters.
          schema:
            type: string
          example: 'BazLamp,POC1000'
        - name: 'search'
          in: query
          description: |
            Filters the authors according to whether they have inventory entries  
            where their content matches the given search.      
            The search works additive to other filters.
          schema:
            type: string
          example: ''
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorsResponse'
              examples:
                authors:
                  $ref: '#/components/examples/AuthorsResponseExample'
        '400':
          description: Invalid filter parameter supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /manufacturers:
    get:
      tags:
        - manufacturers
      summary: Get the contained manufacturers of the inventory
      description: Returns the contained manufacturers of the inventory
      operationId: getManufacturers
      parameters:
        - name: 'filter.author'
          in: query
          description: |
            Filters the manufacturers according to whether they belong to at least one of the given authors with an exact match.       
            The filter works additive to other filters.
          schema:
            type: string
          example: 'MyCompany,siemens'
        - name: 'filter.mpn'
          in: query
          description: |
            Filters the manufacturers according to whether they have inventory entries    
            which belong to at least one of the given mpn (manufacturer part number) with an exact match.    
            The filter works additive to other filters.
          schema:
            type: string
          example: 'BazLamp,POC1000'
        - name: 'search'
          in: query
          description: |
            Filters the manufacturers according to whether they have inventory entries  
            where their content matches the given search.      
            The search works additive to other filters.
          schema:
            type: string
          example: ''
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManufacturersResponse'
              examples:
                manufacturers:
                  $ref: '#/components/examples/ManufacturersResponseExample'
        '400':
          description: Invalid filter parameter supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /mpns:
    get:
      tags:
        - mpns
      summary: Get the contained mpns (manufacturer part numbers) of the inventory
      description: Returns the mpns (manufacturer part numbers) of the inventory
      operationId: getMpns
      parameters:
        - name: 'filter.author'
          in: query
          description: |
            Filters the mpns according to whether they belong to at least one of the given authors with an exact match.     
            The filter works additive to other filters.
          schema:
            type: string
          example: 'MyCompany,siemens'
        - name: 'filter.manufacturer'
          in: query
          description: |
            Filters the mpns according to whether they belong to at least one of the given manufacturers with an exact match.     
            The filter works additive to other filters.
          schema:
            type: string
          example: 'BarTech,siemens'
        - name: 'search'
          in: query
          description: |
            Filters the mpns according to whether their inventory entry content matches the given search.        
            The search works additive to other filters.
          schema:
            type: string
          example: ''
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpnsResponse'
              examples:
                mpns:
                  $ref: '#/components/examples/MpnsResponseExample'
        '400':
          description: Invalid filter parameter supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /repos:
    get:
      tags:
        - repos
      summary: Get the list of repositories
      description: |
        Get the list of available TM repositories. 
        May return empty list when there is only one repository configured and hence there is no need to
        specify a target repository for write operations.
      operationId: getRepos
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReposResponse'
              examples:
                repos:
                  $ref: '#/components/examples/ReposResponseExample'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Upstream repository error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /healthz:
    get:
      tags:
        - health
      summary: Get the overall health of the service
      security:
        - {}
      description: Get the overall health of the service, aggregates the responses from the /health/live and /health/ready
      operationId: getHealth
      responses:
        '204':
          description: Successful operation
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'no-cache, no-store, max-age=0, must-revalidate'
              description: 'no-cache, no-store, max-age=0, must-revalidate'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /healthz/live:
    get:
      tags:
        - health
      summary: Returns the liveliness of the service
      security:
        - {}
      description: Returns the liveliness of the service, or whether it encountered a bug or deadlock
      operationId: getHealthLive
      responses:
        '204':
          description: Successful operation
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'no-cache, no-store, max-age=0, must-revalidate'
              description: 'no-cache, no-store, max-age=0, must-revalidate'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /healthz/ready:
    get:
      tags:
        - health
      summary: Returns the readiness of the service
      security:
        - {}
      description: Returns the readiness of the service, or whether it is ready to process requests
      operationId: getHealthReady
      responses:
        '204':
          description: Successful operation
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'no-cache, no-store, max-age=0, must-revalidate'
              description: 'no-cache, no-store, max-age=0, must-revalidate'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /healthz/startup:
    get:
      tags:
        - health
      summary: Returns whether the service is initialized
      security:
        - {}
      description: Returns whether the service is initialized
      operationId: getHealthStartup
      responses:
        '204':
          description: Successful operation
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'no-cache, no-store, max-age=0, must-revalidate'
              description: 'no-cache, no-store, max-age=0, must-revalidate'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /.completions:
    get:
      tags:
        - internal
      summary: Get completions for shell completion script
      description: |
        For internal use only! Not to be relied on for any production purposes. 
        Returned results may not be complete or the signature may change incompatibly at any time.
        
        Get completions for shell completion script
      operationId: getCompletions
      parameters:
        - name: 'kind'
          in: query
          description: |
            Kind of data to complete
          schema:
            type: string
            enum:
              - 'names'
              - 'fetchNames'
        - name: 'args'
          in: query
          description: |
            Current args
          schema:
            type: array
            items:
              type: string
        - name: 'toComplete'
          in: query
          description: |
            Data to complete
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Illegal query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Completions could not be built
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    InventoryEntry:
      required:
        - tmName
        - schema:author
        - schema:manufacturer
        - schema:mpn
        - versions
      type: object
      properties:
        tmName:
          type: string
          example: 'siemens/siemens/poc1000'
        schema:author:
          $ref: '#/components/schemas/SchemaAuthor'
        schema:manufacturer:
          $ref: '#/components/schemas/SchemaManufacturer'
        schema:mpn:
          type: string
          example: 'POC1000'
        repo:
          $ref: '#/components/schemas/SourceRepository'
        versions:
          type: array
          items:
            $ref: '#/components/schemas/InventoryEntryVersion'
        links:
          $ref: '#/components/schemas/InventoryEntryLinks'
        attachments:
          $ref: "#/components/schemas/AttachmentsList"
    InventoryEntryVersionResponse:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/InventoryEntryVersion'
    InventoryEntryVersionsResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/InventoryEntryVersion'
    InventoryEntryVersion:
      required:
        - tmID
        - externalID
        - description
        - timestamp
        - digest
        - version
      type: object
      properties:
        tmID:
          type: string
          example: 'siemens/siemens/poc1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
        externalID:
          type: string
          example: 'e7f19370-84a3-11ee-b962-0242ac120002'
        description:
          type: string
          example: 'The Powercenter 1000 is a data transceiver for SENTRON circuit protection devices.'
        digest:
          type: string
          example: 'e1594d08a01b'
        version:
          $ref: '#/components/schemas/ModelVersion'
        timestamp:
          type: string
          example: '20231201133246'
        repo:
          $ref: '#/components/schemas/SourceRepository'
        links:
          $ref: '#/components/schemas/InventoryEntryVersionLinks'
        attachments:
          $ref: "#/components/schemas/AttachmentsList"
    InventoryEntryLinks:
      type: object
      required:
        - self
      properties:
        self:
          type: string
          format: uri-reference
          example: './inventory/.tmname/siemens/siemens/poc1000'
    InventoryEntryVersionLinks:
      type: object
      required:
        - self
        - content
      properties:
        self:
          type: string
          format: uri-reference
          example: './inventory/siemens/siemens/poc1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
        content:
          type: string
          format: uri-reference
          example: './thing-models/siemens/siemens/poc1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
    InventoryResponse:
      type: object
      required:
        - data
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        data:
          type: array
          items:
            $ref: '#/components/schemas/InventoryEntry'
    InventoryEntryResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/InventoryEntry'
    ImportThingModelResponse:
      required:
        - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ImportThingModelResult'
    AuthorsResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            type: string
    AttachmentsList:
      type: array
      items:
        $ref: '#/components/schemas/AttachmentsListEntry'
    AttachmentsListEntry:
      type: object
      required:
        - name
        - mediaType
      properties:
        name:
          type: string
        mediaType:
          type: string
        links:
          $ref: '#/components/schemas/AttachmentLinks'
    AttachmentLinks:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          format: uri-reference
          example: './thing-models/siemens/siemens/poc1000/v0.0.0-20231201133246-e1594d08a01b.tm.json/.attachments/README.md'
    SourceRepository:
      type: string
      example: 'global'
      description: |
        The name of the source repository where the inventory entry or version resides. 
        May be left empty when there is only a single repository served by the backend and thus there is not need for
        disambiguation. See also '/repos'
    ManufacturersResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            type: string
    MpnsResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            type: string
    ReposResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/RepoDescription'
    RepoDescription:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
    SchemaAuthor:
      required:
        - schema:name
      type: object
      properties:
        schema:name:
          type: string
          example: 'siemens'
    SchemaManufacturer:
      required:
        - schema:name
      type: object
      properties:
        schema:name:
          type: string
          example: 'siemens'
    Meta:
      type: object
      properties:
        page:
          $ref: '#/components/schemas/MetaPage'
    MetaPage:
      required:
        - elements
      type: object
      properties:
        elements:
          type: integer
    ModelVersion:
      required:
        - model
      type: object
      properties:
        model:
          type: string
          example: '0.0.0'
    ImportThingModelResult:
      required:
        - tmID
      type: object
      properties:
        tmID:
          type: string
          example: 'mycompany/bartech/bazlamp/v0.0.1-20240206122430-1fc13316b7d8.tm.json'
        message:
          type: string
          example: "a TM with the same timestamp but different content exists under ID: mycompany/bartech/bazlamp/v0.0.1-20240206122430-1fc13316b7d8.tm.json"
        code:
          type: string
    ErrorResponse:
      required:
        - title
        - status
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
        instance:
          type: string
        code:
          type: string
        status:
          type: integer
  parameters:
    FetchName:
      name: fetchName
      in: path
      description: >
        Fetch name of a Thing Model. Fetch name is defined as \<name\>[:\<semver\>], 
        where \<name\> is the inventory TM name, \<semver\> is a full or partial semantic version.
        Using \<semver\> will return the most recent version of the TM that matches the provided part of semantic version.
        Without \<semver\>, fetch name refers to the latest available TM version
      required: true
      schema:
        type: string
      examples:
        fullVersion:
          value: 'siemens/siemens/poc1000:v1.2.3'
        major:
          value: 'siemens/siemens/poc1000:1'
        majorMinor:
          value: 'siemens/siemens/poc1000:1.2'
    TMID:
      name: tmID
      in: path
      description: TM ID
      required: true
      schema:
        type: string
      example: 'siemens/siemens/poc1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
    TMName:
      name: tmName
      in: path
      description: >
        Inventory name of a Thing Model. It is the part of a TM ID up to the last /
      required: true
      schema:
        type: string
      examples:
        basic:
          value: 'siemens/siemens/poc1000'
        withOptionalPath:
          value: 'siemens/siemens/poc1000/variants/with-bluetooth'
    ForceImport:
      name: force
      in: query
      description: flag to force the import, ignoring any conflicts with existing data
      required: false
      schema:
        type: boolean
    AttachmentFileName:
      name: attachmentFileName
      in: path
      description: File name of the attachment
      required: true
      schema:
        type: string
      example: 'README.md'
    RepoDisambiguator:
      name: repo
      in: query
      description: Source/target repository name. The parameter is required when repository is ambiguous. See '/repos'
      required: false
      schema:
        type: string
      example: 'global'
    RepoConstraint:
      name: 'repo'
      in: query
      description: Source repository name. Optionally constrains the results to only those from given named repository. See '/repos'
      required: false
      schema:
        type: string
      example: 'global'

  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  examples:
    InventoryEntryResponseExample:
      value:
        data:
          - 'links':
              'self': './inventory/.tmName/siemens/siemens/poc1000'
            'tmName': 'siemens/siemens/poc1000'
            'schema:author':
              'schema:name': 'siemens'
            'schema:manufacturer':
              'schema:name': 'siemens'
            'schema:mpn': 'POC1000'
            'versions':
              - 'description': 'The Powercenter 1000 is a data transceiver for SENTRON circuit protection devices.'
                'digest': '2cd14601ef09'
                'externalID': '{{ID}}'
                'links':
                  'self': './inventory/siemens/siemens/poc1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
                  'content': './thing-models/siemens/siemens/poc1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
                'timestamp': '20240108112117'
                'tmID': 'siemens/siemens/poc1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
                'version':
                  'model': '1.0.0'
              - 'description': 'The Powercenter 1000 is a data transceiver for SENTRON circuit protection devices.'
                'digest': 'f4184d08a02c'
                'externalID': '{{ID}}'
                'links':
                  'self': './inventory/siemens/siemens/poc1000/v0.0.0-20231217140234-f4184d08a02c.tm.json'
                  'content': './thing-models/siemens/siemens/poc1000/v0.0.0-20231217140234-f4184d08a02c.tm.json'
                'timestamp': '20231217140234'
                'tmID': 'siemens/siemens/poc1000/v0.0.0-20231217140234-f4184d08a02c.tm.json'
                'version':
                  'model': '0.0.0'
              - 'description': ''
                'digest': 'e1594d08a01b'
                'externalID': '{{ID}}'
                'links':
                  'self': './inventory/siemens/siemens/poc1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
                  'content': './thing-models/siemens/siemens/poc1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
                'timestamp': '20231201133246'
                'tmID': 'siemens/siemens/poc1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
                'version':
                  'model': '0.0.0'
            attachments:
              - name: 'README.md'
                mediaType: 'text/markdown'
                links:
                  content: './thing-models/.tmName/siemens/siemens/poc1000/.attachments/README.md'
              - name: 'User Manual.pdf'
                mediaType: 'application/pdf'
                links:
                  content: './thing-models/.tmName/siemens/siemens/poc1000/.attachments/User%20Manual.pdf'
    InventoryEntryVersionResponseExample:
      value:
        'data':
          'description': 'The Powercenter 1000 is a data transceiver for SENTRON circuit protection devices.'
          'digest': '2cd14601ef09'
          'externalID': '{{ID}}'
          'links':
            'self': './inventory/siemens/siemens/poc1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
            'content': './thing-models/siemens/siemens/poc1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
          'timestamp': '20240108112117'
          'tmID': 'siemens/siemens/poc1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
          'version':
            'model': '1.0.0'
    InventoryEntryVersionsResponseExample:
      value:
        'data':
          - 'description': 'The Powercenter 1000 is a data transceiver for SENTRON circuit protection devices.'
            'digest': '2cd14601ef09'
            'externalID': '{{ID}}'
            'links':
              'self': './inventory/siemens/siemens/poc1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
              'content': './thing-models/siemens/siemens/poc1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
            'timestamp': '20240108112117'
            'tmID': 'siemens/siemens/poc1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
            'version':
              'model': '1.0.0'
    InventoryResponseExample:
      value:
        meta:
          page:
            elements: 2
        data:
          - 'links':
              'self': './inventory/.tmName/siemens/siemens/poc1000'
            'tmName': 'siemens/siemens/poc1000'
            'schema:author':
              'schema:name': 'siemens'
            'schema:manufacturer':
              'schema:name': 'siemens'
            'schema:mpn': 'POC1000'
            'versions':
              - 'description': 'The Powercenter 1000 is a data transceiver for SENTRON circuit protection devices.'
                'digest': '2cd14601ef09'
                'externalID': '{{ID}}'
                'links':
                  'self': './inventory/siemens/siemens/poc1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
                  'content': './thing-models/siemens/siemens/poc1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
                'timestamp': '20240108112117'
                'tmID': 'siemens/siemens/poc1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
                'version':
                  'model': '1.0.0'
              - 'description': 'The Powercenter 1000 is a data transceiver for SENTRON circuit protection devices.'
                'digest': 'f4184d08a02c'
                'externalID': '{{ID}}'
                'links':
                  'self': './inventory/siemens/siemens/poc1000/v0.0.0-20231217140234-f4184d08a02c.tm.json'
                  'content': './thing-models/siemens/siemens/poc1000/v0.0.0-20231217140234-f4184d08a02c.tm.json'
                'timestamp': '20231217140234'
                'tmID': 'siemens/siemens/poc1000/v0.0.0-20231217140234-f4184d08a02c.tm.json'
                'version':
                  'model': '0.0.0'
              - 'description': ''
                'digest': 'e1594d08a01b'
                'externalID': '{{ID}}'
                'links':
                  'self': './inventory/siemens/siemens/poc1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
                  'content': './thing-models/siemens/siemens/poc1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
                'timestamp': '20231201133246'
                'tmID': 'siemens/siemens/poc1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
                'version':
                  'model': '0.0.0'
          - 'links':
              'self': './inventory/.tmName/MyCompany/BarTech/BazLamp'
            'tmName': 'MyCompany/BarTech/BazLamp'
            'schema:author':
              'schema:name': 'MyCompany'
            'schema:manufacturer':
              'schema:name': 'BarTech'
            'schema:mpn': 'BazLamp'
            'versions':
               - 'description': 'The BarTech BazLamp is a modern smart floor lamp.'
                 'digest': '1fc13316b7d8'
                 'externalID': 'e7f19370-84a3-11ee-b962-0242ac120002'
                 'links':
                   'self': './inventory/MyCompany/BarTech/BazLamp/v0.0.1-20240206122430-1fc13316b7d8.tm.json'
                   'content': './thing-models/MyCompany/BarTech/BazLamp/v0.0.1-20240206122430-1fc13316b7d8.tm.json'
                 'timestamp': '20240206122430'
                 'tmID': 'MyCompany/BarTech/BazLamp/v0.0.1-20240206122430-1fc13316b7d8.tm.json'
                 'version':
                  'model': '0.0.1'
    AuthorsResponseExample:
      value:
        data:
          - 'MyCompany'
          - 'siemens'
    ManufacturersResponseExample:
      value:
        data:
          - 'BarTech'
          - 'siemens'
    MpnsResponseExample:
      value:
        data:
          - 'BazLamp'
          - 'POC1000'
    ReposResponseExample:
      value:
        data:
          - name: 'global'
            description: 'Global TM catalog (read-only)'
          - name: 'private'
            description: 'Our private TMs'
    ImportTMPayloadExample:
      value:
        '@context':
           -  'https://www.w3.org/2022/wot/td/v1.1'
           - schema:
               'https://schema.org/'
        '@type': 'tm:ThingModel'
        'id': 'e7f19370-84a3-11ee-b962-0242ac120002'
        'title': 'BazLamp Smart'
        'description': 'The BarTech BazLamp is a modern smart floor lamp.'
        'schema:author':
          'schema:name': 'MyCompany'
        'schema:manufacturer':
          'schema:name': 'BarTech'
        'schema:mpn': 'BazLamp'
        'version':
          'model': 'v0.0.1'
        'properties':
          'status':
            'description': 'current status of the lamp (on|off)'
            'type': 'string'
            'readOnly': true
        'actions':
          'toggle':
            'description': 'Turn the lamp on or off'
        'events':
          'overheating':
            'description': 'Lamp reaches a critical temperature (overheating)'
            'data':
              'type': 'string'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
